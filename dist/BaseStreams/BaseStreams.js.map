{
  "version": 3,
  "sources": ["BaseStreams.ts"],
  "sourcesContent": ["/*!\nMIT No Attribution\n\nCopyright 2024 an(https://github.com/an-distr)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this\nsoftware and associated documentation files (the \"Software\"), to deal in the Software\nwithout restriction, including without limitation the rights to use, copy, modify,\nmerge, publish, distribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\nINCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nimport { PullPush, PullPushNonQueue, PullPushTypes } from \"../PullPush/PullPush.ts\"\n\nexport type BaseType =\n  \"base16\" |\n  \"base32\" |\n  \"base32hex\" |\n  \"base64\" |\n  \"base64url\" |\n  string\n\nconst MAP_BASE16 = \"0123456789ABCDEF\"\nconst MAP_BASE32 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\"\nconst MAP_BASE32_HEX = \"0123456789ABCDEFGHIJKLMNOPQRSTUV\"\nconst MAP_BASE64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\nconst MAP_BASE64_URL = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\"\n\nexport interface BaseContext {\n  bitsPerByte: number\n  map: string\n  bitSpan: number\n  blockSize: number\n  padding: boolean\n  paddingChar: string\n}\n\nfunction createContext(base?: BaseType) {\n  const context = {} as BaseContext\n  context.bitsPerByte = 8\n  context.padding = true\n  context.paddingChar = \"=\"\n\n  base ??= \"base64\"\n  base = base.toLowerCase()\n\n  switch (base) {\n    case \"base16\":\n      context.map = MAP_BASE16;\n      context.bitSpan = 4;\n      context.blockSize = 1;\n      break;\n\n    case \"base32\":\n    case \"base32hex\":\n      context.map = base === \"base32hex\" ? MAP_BASE32_HEX : MAP_BASE32;\n      context.bitSpan = 5;\n      context.blockSize = 8;\n      break;\n\n    case \"base64\":\n    case \"base64url\":\n      context.map = base === \"base64url\" ? MAP_BASE64_URL : MAP_BASE64;\n      context.bitSpan = 6;\n      context.blockSize = 4;\n      break;\n\n    default:\n      throw new Error(\"Unsupported\")\n  }\n\n  return context\n}\n\nexport class BaseEncoder extends PullPush<number, string, PullPushNonQueue<number, string>> {\n  private context: BaseContext\n  private inputBuffer: number[] = []\n  private outputBuffer: string[] = []\n\n  constructor(base?: BaseType)\n  constructor(context?: BaseContext)\n  constructor(arg?: BaseType | BaseContext) {\n    super(new PullPushNonQueue)\n    if (typeof arg === \"string\") {\n      this.context = createContext(arg)\n    }\n    else {\n      this.context = arg ?? createContext()\n    }\n  }\n\n  override async push(data?: PullPushTypes<number>) {\n    if (!data) {\n      return\n    }\n\n    let bytes: number[]\n    if (typeof data === \"number\") {\n      bytes = [data]\n    }\n    else if (typeof (data as Iterable<number>)[Symbol.iterator] === \"function\") {\n      bytes = Array.from(data as Iterable<number>)\n    }\n    else if (typeof (data as AsyncIterable<number>)[Symbol.asyncIterator] === \"function\") {\n      bytes = []\n      for await (const value of data as AsyncIterable<number>) {\n        bytes.push(value)\n      }\n    }\n    else {\n      bytes = Array.from(new Uint8Array(data as ArrayBufferLike))\n    }\n\n    for (const b of bytes) {\n      for (const n of b.toString(2).padStart(this.context.bitsPerByte, \"0\")) {\n        this.inputBuffer.push(n === \"0\" ? 0 : 1)\n      }\n    }\n  }\n\n  async *pullpush(data?: PullPushTypes<number>, flush?: boolean) {\n    await this.push(data)\n\n    do {\n      while (this.inputBuffer.length >= this.context.bitSpan) {\n        const bits = parseInt(this.inputBuffer.splice(0, this.context.bitSpan).join(\"\"), 2)\n        this.outputBuffer.push(this.context.map[bits])\n      }\n\n      if (this.outputBuffer.length >= this.context.blockSize) {\n        const chunk = this.outputBuffer.splice(0,\n          this.context.blockSize * Math.floor(this.outputBuffer.length / this.context.blockSize))\n          .join(\"\")\n        const next: PullPushTypes<number> = yield chunk\n        await this.push(next)\n      }\n\n      if (flush) {\n        if (this.inputBuffer.length > 0) {\n          const bits = parseInt(this.inputBuffer.splice(0, this.context.bitSpan).join(\"\").padEnd(this.context.bitSpan, \"0\"), 2)\n          this.outputBuffer.push(this.context.map[bits])\n          let chunk = this.outputBuffer.splice(0, this.context.blockSize).join(\"\")\n          if (this.context.padding) {\n            chunk = chunk.padEnd(this.context.blockSize, this.context.paddingChar)\n          }\n          const next: PullPushTypes<number> = yield chunk\n          await this.push(next)\n        }\n      }\n      else {\n        break\n      }\n    } while (this.inputBuffer.length > 0)\n  }\n}\n\nexport class BaseDecoder extends PullPush<string, Uint8Array, PullPushNonQueue<string, Uint8Array>> {\n  private context: BaseContext\n  private inputBuffer: number[] = []\n  private outputBuffer: number[] = []\n\n  constructor(base?: BaseType)\n  constructor(context?: BaseContext)\n  constructor(arg?: BaseType | BaseContext) {\n    super(new PullPushNonQueue)\n    if (typeof arg === \"string\") {\n      this.context = createContext(arg)\n    }\n    else {\n      this.context = arg ?? createContext()\n    }\n  }\n\n  override async push(data?: PullPushTypes<string>) {\n    if (!data) {\n      return\n    }\n\n    let strarr: string[]\n    if (Array.isArray(data)) {\n      strarr = data\n    }\n    else {\n      strarr = Array.from(data as Iterable<string>)\n    }\n\n    for (const s of strarr) {\n      for (const c of s) {\n        if (c === this.context.paddingChar) {\n          continue\n        }\n        const index = this.context.map.indexOf(c)\n        if (index < 0) {\n          throw new Error(`Invalid character '${c}'`)\n        }\n        for (const n of index.toString(2).padStart(this.context.bitSpan, \"0\")) {\n          this.inputBuffer.push(n === \"0\" ? 0 : 1)\n        }\n      }\n    }\n  }\n\n  async *pullpush(data?: PullPushTypes<string>, flush?: boolean) {\n    await this.push(data)\n\n    do {\n      while (this.inputBuffer.length >= this.context.bitsPerByte) {\n        const byte = this.inputBuffer.splice(0, this.context.bitsPerByte).join(\"\")\n        this.outputBuffer.push(parseInt(byte, 2))\n      }\n\n      if (this.outputBuffer.length > 0) {\n        const next: PullPushTypes<string> = yield new Uint8Array(this.outputBuffer)\n        this.outputBuffer.length = 0\n        await this.push(next)\n      }\n\n      if (flush) {\n        this.inputBuffer.length = 0\n        this.outputBuffer.length = 0\n      }\n      else {\n        break\n      }\n    } while (this.inputBuffer.length > 0)\n  }\n}"],
  "mappings": "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",
  "names": []
}
